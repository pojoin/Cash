<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns="xsive.controls.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="96" backgroundColor="#FFFFFF" cornerRadius="4" borderStyle="solid" borderThickness="0" dropShadowEnabled="true">
	<mx:Image x="10" y="10" width="57" height="53" source="images/BuzzyBee.png" scaleContent="false" id="img_icon"/>
	<mx:Button x="348" y="62" label="Ok" id="butn_ok" click="{CocoaPopUpManager.removePopUp(this)}"/>
	<mx:TextArea x="75" y="10" width="315" borderStyle="none" id="txt_label" text="{text}"/>
	
	<mx:Script>
		<![CDATA[
			import com.cash.common.xsive.managers.CocoaPopUpManager;
			import mx.core.Application;
			import mx.events.CloseEvent;
			
			/**
			 This is an example of a custom component you can create to use the CocoaPopupManager
			 Could be usefull for things like login boxes, system messages etc.
			 
			 I wanted to show how you could create in the visual mxml files a nice component and
			 have it interact with the CocoaPopUpManager
			 
			 Enjoy
			 
			 **/
			 
			[Bindable]
			public var text:String;
		
			public static function show(text:String = "", title:String = "",
                                flags:uint = 0x4 /* Alert.OK */, 
                                parent:Sprite = null, 
                                modal:Boolean = false,
                                closeHandler:Function = null, 
                                iconClass:Class = null, 
                                defaultButtonFlag:uint = 0x4 /* Alert.OK */):CocoaAlert
    		{


				var alert:CocoaAlert = new CocoaAlert();	

				if (!parent){
					parent = Sprite(Application.application);	
				}
					

        		CocoaPopUpManager.addPopUp(alert, parent, modal);

				return alert;
			}
		]]>
	</mx:Script>
</mx:Canvas>
